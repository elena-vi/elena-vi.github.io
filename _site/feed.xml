<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-04-05T15:36:34+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Elena Vilimaite</title><subtitle>London based innovative, confident and motivated software engineer.</subtitle><author><name>Elena Vilimaite</name></author><entry><title type="html">My Micro Frontend Experience</title><link href="http://localhost:4000/micro/frontend/2023/04/05/my-micro-frontend-experience.html" rel="alternate" type="text/html" title="My Micro Frontend Experience" /><published>2023-04-05T14:22:05+01:00</published><updated>2023-04-05T14:22:05+01:00</updated><id>http://localhost:4000/micro/frontend/2023/04/05/my-micro-frontend-experience</id><content type="html" xml:base="http://localhost:4000/micro/frontend/2023/04/05/my-micro-frontend-experience.html"><![CDATA[<p>As a member of a team that used Micro Frontends, I can attest to their popularity in building web applications due to their flexibility, modularity, and scalability. However, like any new technology, we face challenges when working with Micro Frontends. In this article, I’ll share some of the challenges my team and I have faced and how we can overcome them.</p>

<p>One major challenge we experienced was the lack of context. We didn’t understand why we were using Micro Frontends because our technical design authority mandated it without explaining the benefits or context behind the decision. This lack of understanding made it difficult for us to be successful, especially when the chosen architecture was used globally and not tailored to a specific problem, causing confusion and implementation challenges.</p>

<p>Another issue we faced was not having enough time to upskill. Our team didn’t possess the necessary knowledge and experience with Micro Frontends, which caused delays in development. For example, we didn’t understand module federation, a crucial aspect of building Micro Frontends. We also struggled to comprehend how different terraform modules were interconnected and their functions. As a result, our initial deployments didn’t work well, leading to wasted time.</p>

<p>Without the proper knowledge of Micro Frontends, we wasted time rebuilding components. We assumed there would be shared components across the ecosystem, but this wasn’t always the case. For instance, there was a common app with many components, but we couldn’t figure out how to reuse them. Consequently, we ended up rebuilding all those components, wasting time and effort.</p>

<p>Besides the challenges I mentioned, we encountered other difficulties when using Micro Frontends. The infrastructure setup, including terraform setup, DNS, and routing, proved challenging. Pipeline testing wasn’t optimised for testing each Micro Frontend independently, resulting in longer deployment times.</p>

<h2 id="if-i-were-to-face-these-challenges-again-heres-how-i-would-overcome-them">If I were to face these challenges again, here’s how I would overcome them:</h2>

<p>Build individual pages as Micro Frontends: Rather than building individual pages in an app, I would make each page its own Micro Frontend. This approach would enable my team to work in parallel and leverage the primary benefits of Micro Frontends. It would also allow for faster data rendering.</p>

<p>Optimise the API: I would optimise the API for Micro Frontends instead of over-fetching data and discarding unnecessary information. This change would lead to more efficient data transfer and faster page loads. Unfortunately, on this particular engagement the technical design authority had forbidden the use of GraphQL.</p>

<p>In conclusion, Micro Frontends can be a powerful tool for building web applications, but they come with their own set of challenges. Teams need to understand the benefits of Micro Frontends, use them effectively, and possess the necessary knowledge and skills to implement them successfully. By overcoming these challenges and adopting best practices, teams can leverage the advantages of Micro Frontends to build scalable, modular, and flexible web applications.</p>]]></content><author><name>Elena Vilimaite</name></author><category term="micro" /><category term="frontend" /><summary type="html"><![CDATA[As a member of a team that used Micro Frontends, I can attest to their popularity in building web applications due to their flexibility, modularity, and scalability. However, like any new technology, we face challenges when working with Micro Frontends. In this article, I’ll share some of the challenges my team and I have faced and how we can overcome them.]]></summary></entry><entry><title type="html">Micro Frontends: Challenges Faced by Teams</title><link href="http://localhost:4000/jekyll/update/2023/04/05/micro-frontends-challenges-faced-by-teams.html" rel="alternate" type="text/html" title="Micro Frontends: Challenges Faced by Teams" /><published>2023-04-05T13:22:05+01:00</published><updated>2023-04-05T13:22:05+01:00</updated><id>http://localhost:4000/jekyll/update/2023/04/05/micro-frontends-challenges-faced-by-teams</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/04/05/micro-frontends-challenges-faced-by-teams.html"><![CDATA[<p>Micro Frontends have become a popular approach in building web applications due to their flexibility, modularity, and scalability. However, like any new technology, there are challenges that come with it. In this article, the challenges faced by teams when using Micro Frontends and possible solutions to overcome them will be discussed.</p>

<h2 id="background">Background</h2>

<p>Two main approaches to building websites have emerged in recent years Single Page Apps and micro frontends, each have advantages and disadvantages, in short single page apps create a community of engineers working in a single application this means it’s very easy to share solutions such as components, libraries and optimisations but merge conflicts can be a problem as larger teams try to contribute to the same app. Micro frontends, like microservices are multiple apps making it easy for several teams to build their own apps without getting in each other’s way but it’s then harder to share components, libraries and optimisations.</p>

<h2 id="lack-of-context">Lack of Context</h2>

<p>A major challenge faced by teams when using micro frontends for the first time without proper context is the lack of understanding of why they are being used. For example, if a technical design authority mandates the use of micro frontends without explaining the benefits or context behind the decision, it can make it difficult for the team to be successful. Moreover, if a chosen architecture is used globally and not specific to a particular problem, it can lead to confusion and challenges in implementation.</p>

<h2 id="no-time-to-upskill">No Time to Upskill</h2>

<p>Another challenge is the lack of time to upskill. Teams may not have the necessary knowledge and experience with Micro Frontends, and this can cause delays in development. For instance, they may not understand module federation, which is crucial for building Micro Frontends. Also, the team may not know how the different terraform modules are interconnected and what they do. As a result, the first few deployments may not work well, leading to wasted time.</p>

<h2 id="wasted-time-rebuilding-components">Wasted Time Rebuilding Components</h2>

<p>Without the proper knowledge of Micro Frontends, teams may waste time rebuilding components. They may assume that there will be some shared components across the ecosystem, but this may not be the case. For example, there may be a common app that includes many components, but it may not be clear how they can be reused. Therefore, the team may end up rebuilding all those components, leading to wasted time and effort.</p>

<h2 id="other-challenges">Other Challenges</h2>

<p>Aside from the challenges mentioned above, other difficulties may arise when using Micro Frontends. These include:</p>
<ul>
  <li>Infrastructure setup, such as terraform setup, DNS, and routing, can be challenging.</li>
  <li>Pipeline testing may not be optimised for testing each Micro Frontend independently, leading to longer deployment times.</li>
</ul>

<h2 id="some-ways-they-could-overcome-the-challenges">Some ways they could overcome the challenges</h2>

<p>If a team were to face the same challenges, here are some ways they could overcome them:</p>

<h3 id="foster-clear-communication-and-documentation-practices">Foster Clear Communication and Documentation Practices</h3>

<p>Clear communication and documentation are crucial for successful Micro Frontends implementation. Through workshops, documenting project rationale, and creating best practice guidelines, teams gain comprehensive knowledge, enabling informed decisions and effective architecture implementation.</p>

<h3 id="building-individual-pages">Building Individual Pages</h3>

<p>Instead of building individual pages in an app, each page would have its own Micro Frontend. This would allow the team to split the work up amongst themselves and work in parallel, which is one of the primary values of Micro Frontends. It would also be faster to render the data.</p>

<h3 id="building-a-deployment-platform">Building a deployment platform</h3>

<p>Instead of leaving teams to attempt to reuse existing solutions to move to a Micro Frontend approach, build a standard infrastructure configuration and deployment pipeline optimised for building, testing and deploying a set of Micro Frontends. This allows for testing to be optimised and tests to be run in parallel, this could support either a monorepo or polyrepo solution allowing shared code to be accessed by each Microfrontend more easily.</p>

<h3 id="optimising-the-api">Optimising the API</h3>

<p>The API providing data could be optimised for the Micro Frontends by using GraphQL, rather than pages over-fetching and getting everything from the API and throwing away the data that wasn’t needed. This would lead to more efficient data transfer and faster page loads.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Micro frontends can be a powerful tool for building web applications, but they come with their own set of challenges. Teams must understand the benefits of micro frontends, how to use them effectively, and have the necessary knowledge and skills to implement them successfully. By overcoming the challenges and adopting best practices, teams can leverage the benefits of micro frontends and build scalable, modular, and flexible web applications.</p>]]></content><author><name>Elena Vilimaite</name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Micro Frontends have become a popular approach in building web applications due to their flexibility, modularity, and scalability. However, like any new technology, there are challenges that come with it. In this article, the challenges faced by teams when using Micro Frontends and possible solutions to overcome them will be discussed.]]></summary></entry></feed>